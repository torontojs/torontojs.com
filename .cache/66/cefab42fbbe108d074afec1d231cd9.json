{"id":"../node_modules/commonmark/lib/blocks.js","dependencies":[{"name":"/Users/alex-wilmer/Projects/torontojs/torontojs.com/package.json","includedInParent":true,"mtime":1572820182646},{"name":"/Users/alex-wilmer/Projects/torontojs/torontojs.com/node_modules/commonmark/package.json","includedInParent":true,"mtime":1572818838819},{"name":"./node","loc":{"line":3,"column":19},"parent":"/Users/alex-wilmer/Projects/torontojs/torontojs.com/node_modules/commonmark/lib/blocks.js","resolved":"/Users/alex-wilmer/Projects/torontojs/torontojs.com/node_modules/commonmark/lib/node.js"},{"name":"./common","loc":{"line":6,"column":23},"parent":"/Users/alex-wilmer/Projects/torontojs/torontojs.com/node_modules/commonmark/lib/blocks.js","resolved":"/Users/alex-wilmer/Projects/torontojs/torontojs.com/node_modules/commonmark/lib/common.js"},{"name":"./inlines","loc":{"line":17,"column":27},"parent":"/Users/alex-wilmer/Projects/torontojs/torontojs.com/node_modules/commonmark/lib/blocks.js","resolved":"/Users/alex-wilmer/Projects/torontojs/torontojs.com/node_modules/commonmark/lib/inlines.js"}],"generated":{"js":"\"use strict\";\n\nvar Node = require('./node');\nvar unescapeString = require('./common').unescapeString;\nvar OPENTAG = require('./common').OPENTAG;\nvar CLOSETAG = require('./common').CLOSETAG;\n\nvar CODE_INDENT = 4;\n\nvar C_TAB = 9;\nvar C_NEWLINE = 10;\nvar C_GREATERTHAN = 62;\nvar C_LESSTHAN = 60;\nvar C_SPACE = 32;\nvar C_OPEN_BRACKET = 91;\n\nvar InlineParser = require('./inlines');\n\nvar reHtmlBlockOpen = [\n   /./, // dummy for 0\n   /^<(?:script|pre|style)(?:\\s|>|$)/i,\n   /^<!--/,\n   /^<[?]/,\n   /^<![A-Z]/,\n   /^<!\\[CDATA\\[/,\n   /^<[/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|title|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|[/]?[>]|$)/i,\n    new RegExp('^(?:' + OPENTAG + '|' + CLOSETAG + ')\\s*$', 'i')\n];\n\nvar reHtmlBlockClose = [\n   /./, // dummy for 0\n   /<\\/(?:script|pre|style)>/i,\n   /-->/,\n   /\\?>/,\n   />/,\n   /\\]\\]>/\n];\n\nvar reThematicBreak = /^(?:(?:\\* *){3,}|(?:_ *){3,}|(?:- *){3,}) *$/;\n\nvar reMaybeSpecial = /^[#`~*+_=<>0-9-]/;\n\nvar reNonSpace = /[^ \\t\\f\\v\\r\\n]/;\n\nvar reBulletListMarker = /^[*+-]/;\n\nvar reOrderedListMarker = /^(\\d{1,9})([.)])/;\n\nvar reATXHeadingMarker = /^#{1,6}(?: +|$)/;\n\nvar reCodeFence = /^`{3,}(?!.*`)|^~{3,}(?!.*~)/;\n\nvar reClosingCodeFence = /^(?:`{3,}|~{3,})(?= *$)/;\n\nvar reSetextHeadingLine = /^(?:=+|-+) *$/;\n\nvar reLineEnding = /\\r\\n|\\n|\\r/;\n\n// Returns true if string contains only space characters.\nvar isBlank = function(s) {\n    return !(reNonSpace.test(s));\n};\n\nvar peek = function(ln, pos) {\n    if (pos < ln.length) {\n        return ln.charCodeAt(pos);\n    } else {\n        return -1;\n    }\n};\n\n// DOC PARSER\n\n// These are methods of a Parser object, defined below.\n\n// Returns true if block ends with a blank line, descending if needed\n// into lists and sublists.\nvar endsWithBlankLine = function(block) {\n    while (block) {\n        if (block._lastLineBlank) {\n            return true;\n        }\n        var t = block.type;\n        if (t === 'List' || t === 'Item') {\n            block = block._lastChild;\n        } else {\n            break;\n        }\n    }\n    return false;\n};\n\n// Break out of all containing lists, resetting the tip of the\n// document to the parent of the highest list, and finalizing\n// all the lists.  (This is used to implement the \"two blank lines\n// break out of all lists\" feature.)\nvar breakOutOfLists = function(block) {\n    var b = block;\n    var last_list = null;\n    do {\n        if (b.type === 'List') {\n            last_list = b;\n        }\n        b = b._parent;\n    } while (b);\n\n    if (last_list) {\n        while (block !== last_list) {\n            this.finalize(block, this.lineNumber);\n            block = block._parent;\n        }\n        this.finalize(last_list, this.lineNumber);\n        this.tip = last_list._parent;\n    }\n};\n\n// Add a line to the block at the tip.  We assume the tip\n// can accept lines -- that check should be done before calling this.\nvar addLine = function() {\n    this.tip._string_content += this.currentLine.slice(this.offset) + '\\n';\n};\n\n// Add block of type tag as a child of the tip.  If the tip can't\n// accept children, close and finalize it and try its parent,\n// and so on til we find a block that can accept children.\nvar addChild = function(tag, offset) {\n    while (!this.blocks[this.tip.type].canContain(tag)) {\n        this.finalize(this.tip, this.lineNumber - 1);\n    }\n\n    var column_number = offset + 1; // offset 0 = column 1\n    var newBlock = new Node(tag, [[this.lineNumber, column_number], [0, 0]]);\n    newBlock._string_content = '';\n    this.tip.appendChild(newBlock);\n    this.tip = newBlock;\n    return newBlock;\n};\n\n// Parse a list marker and return data on the marker (type,\n// start, delimiter, bullet character, padding) or null.\nvar parseListMarker = function(parser) {\n    var rest = parser.currentLine.slice(parser.nextNonspace);\n    var match;\n    var nextc;\n    var spacesStartCol;\n    var spacesStartOffset;\n    var data = { type: null,\n                 tight: true,  // lists are tight by default\n                 bulletChar: null,\n                 start: null,\n                 delimiter: null,\n                 padding: null,\n                 markerOffset: parser.indent };\n    if ((match = rest.match(reBulletListMarker))) {\n        data.type = 'Bullet';\n        data.bulletChar = match[0][0];\n\n    } else if ((match = rest.match(reOrderedListMarker))) {\n        data.type = 'Ordered';\n        data.start = parseInt(match[1]);\n        data.delimiter = match[2];\n    } else {\n        return null;\n    }\n    // make sure we have spaces after\n    nextc = peek(parser.currentLine, parser.nextNonspace + match[0].length);\n    if (!(nextc === -1 || nextc === C_TAB || nextc === C_SPACE)) {\n        return null;\n    }\n\n    // we've got a match! advance offset and calculate padding\n    parser.advanceNextNonspace(); // to start of marker\n    parser.advanceOffset(match[0].length, true); // to end of marker\n    spacesStartCol = parser.column;\n    spacesStartOffset = parser.offset;\n    do {\n        parser.advanceOffset(1, true);\n        nextc = peek(parser.currentLine, parser.offset);\n    } while (parser.column - spacesStartCol < 5 &&\n           (nextc === C_SPACE || nextc === C_TAB));\n    var blank_item = peek(parser.currentLine, parser.offset) === -1;\n    var spaces_after_marker = parser.column - spacesStartCol;\n    if (spaces_after_marker >= 5 ||\n        spaces_after_marker < 1 ||\n        blank_item) {\n        data.padding = match[0].length + 1;\n        parser.column = spacesStartCol;\n        parser.offset = spacesStartOffset;\n        if (peek(parser.currentLine, parser.offset) === C_SPACE) {\n            parser.advanceOffset(1, true);\n        }\n    } else {\n        data.padding = match[0].length + spaces_after_marker;\n    }\n    return data;\n};\n\n// Returns true if the two list items are of the same type,\n// with the same delimiter and bullet character.  This is used\n// in agglomerating list items into lists.\nvar listsMatch = function(list_data, item_data) {\n    return (list_data.type === item_data.type &&\n            list_data.delimiter === item_data.delimiter &&\n            list_data.bulletChar === item_data.bulletChar);\n};\n\n// Finalize and close any unmatched blocks.\nvar closeUnmatchedBlocks = function() {\n    if (!this.allClosed) {\n        // finalize any blocks not matched\n        while (this.oldtip !== this.lastMatchedContainer) {\n            var parent = this.oldtip._parent;\n            this.finalize(this.oldtip, this.lineNumber - 1);\n            this.oldtip = parent;\n        }\n        this.allClosed = true;\n    }\n};\n\n// 'finalize' is run when the block is closed.\n// 'continue' is run to check whether the block is continuing\n// at a certain line and offset (e.g. whether a block quote\n// contains a `>`.  It returns 0 for matched, 1 for not matched,\n// and 2 for \"we've dealt with this line completely, go to next.\"\nvar blocks = {\n    Document: {\n        continue: function() { return 0; },\n        finalize: function() { return; },\n        canContain: function(t) { return (t !== 'Item'); },\n        acceptsLines: false\n    },\n    List: {\n        continue: function() { return 0; },\n        finalize: function(parser, block) {\n            var item = block._firstChild;\n            while (item) {\n                // check for non-final list item ending with blank line:\n                if (endsWithBlankLine(item) && item._next) {\n                    block._listData.tight = false;\n                    break;\n                }\n                // recurse into children of list item, to see if there are\n                // spaces between any of them:\n                var subitem = item._firstChild;\n                while (subitem) {\n                    if (endsWithBlankLine(subitem) &&\n                        (item._next || subitem._next)) {\n                        block._listData.tight = false;\n                        break;\n                    }\n                    subitem = subitem._next;\n                }\n                item = item._next;\n            }\n        },\n        canContain: function(t) { return (t === 'Item'); },\n        acceptsLines: false\n    },\n    BlockQuote: {\n        continue: function(parser) {\n            var ln = parser.currentLine;\n            if (!parser.indented &&\n                peek(ln, parser.nextNonspace) === C_GREATERTHAN) {\n                parser.advanceNextNonspace();\n                parser.advanceOffset(1, false);\n                if (peek(ln, parser.offset) === C_SPACE) {\n                    parser.offset++;\n                }\n            } else {\n                return 1;\n            }\n            return 0;\n        },\n        finalize: function() { return; },\n        canContain: function(t) { return (t !== 'Item'); },\n        acceptsLines: false\n    },\n    Item: {\n        continue: function(parser, container) {\n            if (parser.blank && container._firstChild !== null) {\n                parser.advanceNextNonspace();\n            } else if (parser.indent >=\n                       container._listData.markerOffset +\n                       container._listData.padding) {\n                parser.advanceOffset(container._listData.markerOffset +\n                    container._listData.padding, true);\n            } else {\n                return 1;\n            }\n            return 0;\n        },\n        finalize: function() { return; },\n        canContain: function(t) { return (t !== 'Item'); },\n        acceptsLines: false\n    },\n    Heading: {\n        continue: function() {\n            // a heading can never container > 1 line, so fail to match:\n            return 1;\n        },\n        finalize: function() { return; },\n        canContain: function() { return false; },\n        acceptsLines: false\n    },\n    ThematicBreak: {\n        continue: function() {\n            // a thematic break can never container > 1 line, so fail to match:\n            return 1;\n        },\n        finalize: function() { return; },\n        canContain: function() { return false; },\n        acceptsLines: false\n    },\n    CodeBlock: {\n        continue: function(parser, container) {\n            var ln = parser.currentLine;\n            var indent = parser.indent;\n            if (container._isFenced) { // fenced\n                var match = (indent <= 3 &&\n                    ln.charAt(parser.nextNonspace) === container._fenceChar &&\n                    ln.slice(parser.nextNonspace).match(reClosingCodeFence));\n                if (match && match[0].length >= container._fenceLength) {\n                    // closing fence - we're at end of line, so we can return\n                    parser.finalize(container, parser.lineNumber);\n                    return 2;\n                } else {\n                    // skip optional spaces of fence offset\n                    var i = container._fenceOffset;\n                    while (i > 0 && peek(ln, parser.offset) === C_SPACE) {\n                        parser.advanceOffset(1, false);\n                        i--;\n                    }\n                }\n            } else { // indented\n                if (indent >= CODE_INDENT) {\n                    parser.advanceOffset(CODE_INDENT, true);\n                } else if (parser.blank) {\n                    parser.advanceNextNonspace();\n                } else {\n                    return 1;\n                }\n            }\n            return 0;\n        },\n        finalize: function(parser, block) {\n            if (block._isFenced) { // fenced\n                // first line becomes info string\n                var content = block._string_content;\n                var newlinePos = content.indexOf('\\n');\n                var firstLine = content.slice(0, newlinePos);\n                var rest = content.slice(newlinePos + 1);\n                block.info = unescapeString(firstLine.trim());\n                block._literal = rest;\n            } else { // indented\n                block._literal = block._string_content.replace(/(\\n *)+$/, '\\n');\n            }\n            block._string_content = null; // allow GC\n        },\n        canContain: function() { return false; },\n        acceptsLines: true\n    },\n    HtmlBlock: {\n        continue: function(parser, container) {\n            return ((parser.blank &&\n                     (container._htmlBlockType === 6 ||\n                      container._htmlBlockType === 7)) ? 1 : 0);\n        },\n        finalize: function(parser, block) {\n            block._literal = block._string_content.replace(/(\\n *)+$/, '');\n            block._string_content = null; // allow GC\n        },\n        canContain: function() { return false; },\n        acceptsLines: true\n    },\n    Paragraph: {\n        continue: function(parser) {\n            return (parser.blank ? 1 : 0);\n        },\n        finalize: function(parser, block) {\n            var pos;\n            var hasReferenceDefs = false;\n\n            // try parsing the beginning as link reference definitions:\n            while (peek(block._string_content, 0) === C_OPEN_BRACKET &&\n                   (pos =\n                    parser.inlineParser.parseReference(block._string_content,\n                                                       parser.refmap))) {\n                block._string_content = block._string_content.slice(pos);\n                hasReferenceDefs = true;\n            }\n            if (hasReferenceDefs && isBlank(block._string_content)) {\n                block.unlink();\n            }\n        },\n        canContain: function() { return false; },\n        acceptsLines: true\n    }\n};\n\n// block start functions.  Return values:\n// 0 = no match\n// 1 = matched container, keep going\n// 2 = matched leaf, no more block starts\nvar blockStarts = [\n    // block quote\n    function(parser) {\n        if (!parser.indented &&\n            peek(parser.currentLine, parser.nextNonspace) === C_GREATERTHAN) {\n            parser.advanceNextNonspace();\n            parser.advanceOffset(1, false);\n            // optional following space\n            if (peek(parser.currentLine, parser.offset) === C_SPACE) {\n                parser.advanceOffset(1, false);\n            }\n            parser.closeUnmatchedBlocks();\n            parser.addChild('BlockQuote', parser.nextNonspace);\n            return 1;\n        } else {\n            return 0;\n        }\n    },\n\n    // ATX heading\n    function(parser) {\n        var match;\n        if (!parser.indented &&\n            (match = parser.currentLine.slice(parser.nextNonspace).match(reATXHeadingMarker))) {\n            parser.advanceNextNonspace();\n            parser.advanceOffset(match[0].length, false);\n            parser.closeUnmatchedBlocks();\n            var container = parser.addChild('Heading', parser.nextNonspace);\n            container.level = match[0].trim().length; // number of #s\n            // remove trailing ###s:\n            container._string_content =\n                parser.currentLine.slice(parser.offset).replace(/^ *#+ *$/, '').replace(/ +#+ *$/, '');\n            parser.advanceOffset(parser.currentLine.length - parser.offset);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // Fenced code block\n    function(parser) {\n        var match;\n        if (!parser.indented &&\n            (match = parser.currentLine.slice(parser.nextNonspace).match(reCodeFence))) {\n            var fenceLength = match[0].length;\n            parser.closeUnmatchedBlocks();\n            var container = parser.addChild('CodeBlock', parser.nextNonspace);\n            container._isFenced = true;\n            container._fenceLength = fenceLength;\n            container._fenceChar = match[0][0];\n            container._fenceOffset = parser.indent;\n            parser.advanceNextNonspace();\n            parser.advanceOffset(fenceLength, false);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // HTML block\n    function(parser, container) {\n        if (!parser.indented &&\n            peek(parser.currentLine, parser.nextNonspace) === C_LESSTHAN) {\n            var s = parser.currentLine.slice(parser.nextNonspace);\n            var blockType;\n\n            for (blockType = 1; blockType <= 7; blockType++) {\n                if (reHtmlBlockOpen[blockType].test(s) &&\n                    (blockType < 7 ||\n                     container.type !== 'Paragraph')) {\n                    parser.closeUnmatchedBlocks();\n                    // We don't adjust parser.offset;\n                    // spaces are part of the HTML block:\n                    var b = parser.addChild('HtmlBlock',\n                                            parser.offset);\n                    b._htmlBlockType = blockType;\n                    return 2;\n                }\n            }\n        }\n\n        return 0;\n\n    },\n\n    // Setext heading\n    function(parser, container) {\n        var match;\n        if (!parser.indented &&\n            container.type === 'Paragraph' &&\n                   ((match = parser.currentLine.slice(parser.nextNonspace).match(reSetextHeadingLine)))) {\n            parser.closeUnmatchedBlocks();\n            var heading = new Node('Heading', container.sourcepos);\n            heading.level = match[0][0] === '=' ? 1 : 2;\n            heading._string_content = container._string_content;\n            container.insertAfter(heading);\n            container.unlink();\n            parser.tip = heading;\n            parser.advanceOffset(parser.currentLine.length - parser.offset, false);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // thematic break\n    function(parser) {\n        if (!parser.indented &&\n            reThematicBreak.test(parser.currentLine.slice(parser.nextNonspace))) {\n            parser.closeUnmatchedBlocks();\n            parser.addChild('ThematicBreak', parser.nextNonspace);\n            parser.advanceOffset(parser.currentLine.length - parser.offset, false);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // list item\n    function(parser, container) {\n        var data;\n\n        if ((!parser.indented || container.type === 'List')\n                && (data = parseListMarker(parser))) {\n            parser.closeUnmatchedBlocks();\n\n            // add the list if needed\n            if (parser.tip.type !== 'List' ||\n                !(listsMatch(container._listData, data))) {\n                container = parser.addChild('List', parser.nextNonspace);\n                container._listData = data;\n            }\n\n            // add the list item\n            container = parser.addChild('Item', parser.nextNonspace);\n            container._listData = data;\n            return 1;\n        } else {\n            return 0;\n        }\n    },\n\n    // indented code block\n    function(parser) {\n        if (parser.indented &&\n            parser.tip.type !== 'Paragraph' &&\n            !parser.blank) {\n            // indented code\n            parser.advanceOffset(CODE_INDENT, true);\n            parser.closeUnmatchedBlocks();\n            parser.addChild('CodeBlock', parser.offset);\n            return 2;\n        } else {\n            return 0;\n        }\n     }\n\n];\n\nvar advanceOffset = function(count, columns) {\n    var cols = 0;\n    var currentLine = this.currentLine;\n    var charsToTab;\n    var c;\n    while (count > 0 && (c = currentLine[this.offset])) {\n        if (c === '\\t') {\n            charsToTab = 4 - (this.column % 4);\n            this.column += charsToTab;\n            this.offset += 1;\n            count -= (columns ? charsToTab : 1);\n        } else {\n            cols += 1;\n            this.offset += 1;\n            this.column += 1; // assume ascii; block starts are ascii\n            count -= 1;\n        }\n    }\n};\n\nvar advanceNextNonspace = function() {\n    this.offset = this.nextNonspace;\n    this.column = this.nextNonspaceColumn;\n};\n\nvar findNextNonspace = function() {\n    var currentLine = this.currentLine;\n    var i = this.offset;\n    var cols = this.column;\n    var c;\n\n    while ((c = currentLine.charAt(i)) !== '') {\n        if (c === ' ') {\n            i++;\n            cols++;\n        } else if (c === '\\t') {\n            i++;\n            cols += (4 - (cols % 4));\n        } else {\n            break;\n        }\n    }\n    this.blank = (c === '\\n' || c === '\\r' || c === '');\n    this.nextNonspace = i;\n    this.nextNonspaceColumn = cols;\n    this.indent = this.nextNonspaceColumn - this.column;\n    this.indented = this.indent >= CODE_INDENT;\n};\n\n// Analyze a line of text and update the document appropriately.\n// We parse markdown text by calling this on each line of input,\n// then finalizing the document.\nvar incorporateLine = function(ln) {\n    var all_matched = true;\n    var t;\n\n    var container = this.doc;\n    this.oldtip = this.tip;\n    this.offset = 0;\n    this.column = 0;\n    this.lineNumber += 1;\n\n    // replace NUL characters for security\n    if (ln.indexOf('\\u0000') !== -1) {\n        ln = ln.replace(/\\0/g, '\\uFFFD');\n    }\n\n    this.currentLine = ln;\n\n    // For each containing block, try to parse the associated line start.\n    // Bail out on failure: container will point to the last matching block.\n    // Set all_matched to false if not all containers match.\n    var lastChild;\n    while ((lastChild = container._lastChild) && lastChild._open) {\n        container = lastChild;\n\n        this.findNextNonspace();\n\n        switch (this.blocks[container.type].continue(this, container)) {\n        case 0: // we've matched, keep going\n            break;\n        case 1: // we've failed to match a block\n            all_matched = false;\n            break;\n        case 2: // we've hit end of line for fenced code close and can return\n            this.lastLineLength = ln.length;\n            return;\n        default:\n            throw 'continue returned illegal value, must be 0, 1, or 2';\n        }\n        if (!all_matched) {\n            container = container._parent; // back up to last matching block\n            break;\n        }\n    }\n\n    this.allClosed = (container === this.oldtip);\n    this.lastMatchedContainer = container;\n\n    // Check to see if we've hit 2nd blank line; if so break out of list:\n    if (this.blank && container._lastLineBlank) {\n        this.breakOutOfLists(container);\n        container = this.tip;\n    }\n\n    var matchedLeaf = container.type !== 'Paragraph' &&\n            blocks[container.type].acceptsLines;\n    var starts = this.blockStarts;\n    var startsLen = starts.length;\n    // Unless last matched container is a code block, try new container starts,\n    // adding children to the last matched container:\n    while (!matchedLeaf) {\n\n        this.findNextNonspace();\n\n        // this is a little performance optimization:\n        if (!this.indented &&\n            !reMaybeSpecial.test(ln.slice(this.nextNonspace))) {\n            this.advanceNextNonspace();\n            break;\n        }\n\n        var i = 0;\n        while (i < startsLen) {\n            var res = starts[i](this, container);\n            if (res === 1) {\n                container = this.tip;\n                break;\n            } else if (res === 2) {\n                container = this.tip;\n                matchedLeaf = true;\n                break;\n            } else {\n                i++;\n            }\n        }\n\n        if (i === startsLen) { // nothing matched\n            this.advanceNextNonspace();\n            break;\n        }\n    }\n\n    // What remains at the offset is a text line.  Add the text to the\n    // appropriate container.\n\n   // First check for a lazy paragraph continuation:\n    if (!this.allClosed && !this.blank &&\n        this.tip.type === 'Paragraph') {\n        // lazy paragraph continuation\n        this.addLine();\n\n    } else { // not a lazy continuation\n\n        // finalize any blocks not matched\n        this.closeUnmatchedBlocks();\n        if (this.blank && container.lastChild) {\n            container.lastChild._lastLineBlank = true;\n        }\n\n        t = container.type;\n\n        // Block quote lines are never blank as they start with >\n        // and we don't count blanks in fenced code for purposes of tight/loose\n        // lists or breaking out of lists.  We also don't set _lastLineBlank\n        // on an empty list item, or if we just closed a fenced block.\n        var lastLineBlank = this.blank &&\n            !(t === 'BlockQuote' ||\n              (t === 'CodeBlock' && container._isFenced) ||\n              (t === 'Item' &&\n               !container._firstChild &&\n               container.sourcepos[0][0] === this.lineNumber));\n\n        // propagate lastLineBlank up through parents:\n        var cont = container;\n        while (cont) {\n            cont._lastLineBlank = lastLineBlank;\n            cont = cont._parent;\n        }\n\n        if (this.blocks[t].acceptsLines) {\n            this.addLine();\n            // if HtmlBlock, check for end condition\n            if (t === 'HtmlBlock' &&\n                container._htmlBlockType >= 1 &&\n                container._htmlBlockType <= 5 &&\n                reHtmlBlockClose[container._htmlBlockType].test(this.currentLine.slice(this.offset))) {\n                this.finalize(container, this.lineNumber);\n            }\n\n        } else if (this.offset < ln.length && !this.blank) {\n            // create paragraph container for line\n            container = this.addChild('Paragraph', this.offset);\n            this.advanceNextNonspace();\n            this.addLine();\n        }\n    }\n    this.lastLineLength = ln.length;\n};\n\n// Finalize a block.  Close it and do any necessary postprocessing,\n// e.g. creating string_content from strings, setting the 'tight'\n// or 'loose' status of a list, and parsing the beginnings\n// of paragraphs for reference definitions.  Reset the tip to the\n// parent of the closed block.\nvar finalize = function(block, lineNumber) {\n    var above = block._parent;\n    block._open = false;\n    block.sourcepos[1] = [lineNumber, this.lastLineLength];\n\n    this.blocks[block.type].finalize(this, block);\n\n    this.tip = above;\n};\n\n// Walk through a block & children recursively, parsing string content\n// into inline content where appropriate.\nvar processInlines = function(block) {\n    var node, event, t;\n    var walker = block.walker();\n    this.inlineParser.refmap = this.refmap;\n    this.inlineParser.options = this.options;\n    while ((event = walker.next())) {\n        node = event.node;\n        t = node.type;\n        if (!event.entering && (t === 'Paragraph' || t === 'Heading')) {\n            this.inlineParser.parse(node);\n        }\n    }\n};\n\nvar Document = function() {\n    var doc = new Node('Document', [[1, 1], [0, 0]]);\n    return doc;\n};\n\n// The main parsing function.  Returns a parsed document AST.\nvar parse = function(input) {\n    this.doc = new Document();\n    this.tip = this.doc;\n    this.refmap = {};\n    this.lineNumber = 0;\n    this.lastLineLength = 0;\n    this.offset = 0;\n    this.column = 0;\n    this.lastMatchedContainer = this.doc;\n    this.currentLine = \"\";\n    if (this.options.time) { console.time(\"preparing input\"); }\n    var lines = input.split(reLineEnding);\n    var len = lines.length;\n    if (input.charCodeAt(input.length - 1) === C_NEWLINE) {\n        // ignore last blank line created by final newline\n        len -= 1;\n    }\n    if (this.options.time) { console.timeEnd(\"preparing input\"); }\n    if (this.options.time) { console.time(\"block parsing\"); }\n    for (var i = 0; i < len; i++) {\n        this.incorporateLine(lines[i]);\n    }\n    while (this.tip) {\n        this.finalize(this.tip, len);\n    }\n    if (this.options.time) { console.timeEnd(\"block parsing\"); }\n    if (this.options.time) { console.time(\"inline parsing\"); }\n    this.processInlines(this.doc);\n    if (this.options.time) { console.timeEnd(\"inline parsing\"); }\n    return this.doc;\n};\n\n\n// The Parser object.\nfunction Parser(options){\n    return {\n        doc: new Document(),\n        blocks: blocks,\n        blockStarts: blockStarts,\n        tip: this.doc,\n        oldtip: this.doc,\n        currentLine: \"\",\n        lineNumber: 0,\n        offset: 0,\n        column: 0,\n        nextNonspace: 0,\n        nextNonspaceColumn: 0,\n        indent: 0,\n        indented: false,\n        blank: false,\n        allClosed: true,\n        lastMatchedContainer: this.doc,\n        refmap: {},\n        lastLineLength: 0,\n        inlineParser: new InlineParser(options),\n        findNextNonspace: findNextNonspace,\n        advanceOffset: advanceOffset,\n        advanceNextNonspace: advanceNextNonspace,\n        breakOutOfLists: breakOutOfLists,\n        addLine: addLine,\n        addChild: addChild,\n        incorporateLine: incorporateLine,\n        finalize: finalize,\n        processInlines: processInlines,\n        closeUnmatchedBlocks: closeUnmatchedBlocks,\n        parse: parse,\n        options: options || {}\n    };\n}\n\nmodule.exports = Parser;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/commonmark/lib/blocks.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}}],"sources":{"../node_modules/commonmark/lib/blocks.js":"\"use strict\";\n\nvar Node = require('./node');\nvar unescapeString = require('./common').unescapeString;\nvar OPENTAG = require('./common').OPENTAG;\nvar CLOSETAG = require('./common').CLOSETAG;\n\nvar CODE_INDENT = 4;\n\nvar C_TAB = 9;\nvar C_NEWLINE = 10;\nvar C_GREATERTHAN = 62;\nvar C_LESSTHAN = 60;\nvar C_SPACE = 32;\nvar C_OPEN_BRACKET = 91;\n\nvar InlineParser = require('./inlines');\n\nvar reHtmlBlockOpen = [\n   /./, // dummy for 0\n   /^<(?:script|pre|style)(?:\\s|>|$)/i,\n   /^<!--/,\n   /^<[?]/,\n   /^<![A-Z]/,\n   /^<!\\[CDATA\\[/,\n   /^<[/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|title|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|[/]?[>]|$)/i,\n    new RegExp('^(?:' + OPENTAG + '|' + CLOSETAG + ')\\s*$', 'i')\n];\n\nvar reHtmlBlockClose = [\n   /./, // dummy for 0\n   /<\\/(?:script|pre|style)>/i,\n   /-->/,\n   /\\?>/,\n   />/,\n   /\\]\\]>/\n];\n\nvar reThematicBreak = /^(?:(?:\\* *){3,}|(?:_ *){3,}|(?:- *){3,}) *$/;\n\nvar reMaybeSpecial = /^[#`~*+_=<>0-9-]/;\n\nvar reNonSpace = /[^ \\t\\f\\v\\r\\n]/;\n\nvar reBulletListMarker = /^[*+-]/;\n\nvar reOrderedListMarker = /^(\\d{1,9})([.)])/;\n\nvar reATXHeadingMarker = /^#{1,6}(?: +|$)/;\n\nvar reCodeFence = /^`{3,}(?!.*`)|^~{3,}(?!.*~)/;\n\nvar reClosingCodeFence = /^(?:`{3,}|~{3,})(?= *$)/;\n\nvar reSetextHeadingLine = /^(?:=+|-+) *$/;\n\nvar reLineEnding = /\\r\\n|\\n|\\r/;\n\n// Returns true if string contains only space characters.\nvar isBlank = function(s) {\n    return !(reNonSpace.test(s));\n};\n\nvar peek = function(ln, pos) {\n    if (pos < ln.length) {\n        return ln.charCodeAt(pos);\n    } else {\n        return -1;\n    }\n};\n\n// DOC PARSER\n\n// These are methods of a Parser object, defined below.\n\n// Returns true if block ends with a blank line, descending if needed\n// into lists and sublists.\nvar endsWithBlankLine = function(block) {\n    while (block) {\n        if (block._lastLineBlank) {\n            return true;\n        }\n        var t = block.type;\n        if (t === 'List' || t === 'Item') {\n            block = block._lastChild;\n        } else {\n            break;\n        }\n    }\n    return false;\n};\n\n// Break out of all containing lists, resetting the tip of the\n// document to the parent of the highest list, and finalizing\n// all the lists.  (This is used to implement the \"two blank lines\n// break out of all lists\" feature.)\nvar breakOutOfLists = function(block) {\n    var b = block;\n    var last_list = null;\n    do {\n        if (b.type === 'List') {\n            last_list = b;\n        }\n        b = b._parent;\n    } while (b);\n\n    if (last_list) {\n        while (block !== last_list) {\n            this.finalize(block, this.lineNumber);\n            block = block._parent;\n        }\n        this.finalize(last_list, this.lineNumber);\n        this.tip = last_list._parent;\n    }\n};\n\n// Add a line to the block at the tip.  We assume the tip\n// can accept lines -- that check should be done before calling this.\nvar addLine = function() {\n    this.tip._string_content += this.currentLine.slice(this.offset) + '\\n';\n};\n\n// Add block of type tag as a child of the tip.  If the tip can't\n// accept children, close and finalize it and try its parent,\n// and so on til we find a block that can accept children.\nvar addChild = function(tag, offset) {\n    while (!this.blocks[this.tip.type].canContain(tag)) {\n        this.finalize(this.tip, this.lineNumber - 1);\n    }\n\n    var column_number = offset + 1; // offset 0 = column 1\n    var newBlock = new Node(tag, [[this.lineNumber, column_number], [0, 0]]);\n    newBlock._string_content = '';\n    this.tip.appendChild(newBlock);\n    this.tip = newBlock;\n    return newBlock;\n};\n\n// Parse a list marker and return data on the marker (type,\n// start, delimiter, bullet character, padding) or null.\nvar parseListMarker = function(parser) {\n    var rest = parser.currentLine.slice(parser.nextNonspace);\n    var match;\n    var nextc;\n    var spacesStartCol;\n    var spacesStartOffset;\n    var data = { type: null,\n                 tight: true,  // lists are tight by default\n                 bulletChar: null,\n                 start: null,\n                 delimiter: null,\n                 padding: null,\n                 markerOffset: parser.indent };\n    if ((match = rest.match(reBulletListMarker))) {\n        data.type = 'Bullet';\n        data.bulletChar = match[0][0];\n\n    } else if ((match = rest.match(reOrderedListMarker))) {\n        data.type = 'Ordered';\n        data.start = parseInt(match[1]);\n        data.delimiter = match[2];\n    } else {\n        return null;\n    }\n    // make sure we have spaces after\n    nextc = peek(parser.currentLine, parser.nextNonspace + match[0].length);\n    if (!(nextc === -1 || nextc === C_TAB || nextc === C_SPACE)) {\n        return null;\n    }\n\n    // we've got a match! advance offset and calculate padding\n    parser.advanceNextNonspace(); // to start of marker\n    parser.advanceOffset(match[0].length, true); // to end of marker\n    spacesStartCol = parser.column;\n    spacesStartOffset = parser.offset;\n    do {\n        parser.advanceOffset(1, true);\n        nextc = peek(parser.currentLine, parser.offset);\n    } while (parser.column - spacesStartCol < 5 &&\n           (nextc === C_SPACE || nextc === C_TAB));\n    var blank_item = peek(parser.currentLine, parser.offset) === -1;\n    var spaces_after_marker = parser.column - spacesStartCol;\n    if (spaces_after_marker >= 5 ||\n        spaces_after_marker < 1 ||\n        blank_item) {\n        data.padding = match[0].length + 1;\n        parser.column = spacesStartCol;\n        parser.offset = spacesStartOffset;\n        if (peek(parser.currentLine, parser.offset) === C_SPACE) {\n            parser.advanceOffset(1, true);\n        }\n    } else {\n        data.padding = match[0].length + spaces_after_marker;\n    }\n    return data;\n};\n\n// Returns true if the two list items are of the same type,\n// with the same delimiter and bullet character.  This is used\n// in agglomerating list items into lists.\nvar listsMatch = function(list_data, item_data) {\n    return (list_data.type === item_data.type &&\n            list_data.delimiter === item_data.delimiter &&\n            list_data.bulletChar === item_data.bulletChar);\n};\n\n// Finalize and close any unmatched blocks.\nvar closeUnmatchedBlocks = function() {\n    if (!this.allClosed) {\n        // finalize any blocks not matched\n        while (this.oldtip !== this.lastMatchedContainer) {\n            var parent = this.oldtip._parent;\n            this.finalize(this.oldtip, this.lineNumber - 1);\n            this.oldtip = parent;\n        }\n        this.allClosed = true;\n    }\n};\n\n// 'finalize' is run when the block is closed.\n// 'continue' is run to check whether the block is continuing\n// at a certain line and offset (e.g. whether a block quote\n// contains a `>`.  It returns 0 for matched, 1 for not matched,\n// and 2 for \"we've dealt with this line completely, go to next.\"\nvar blocks = {\n    Document: {\n        continue: function() { return 0; },\n        finalize: function() { return; },\n        canContain: function(t) { return (t !== 'Item'); },\n        acceptsLines: false\n    },\n    List: {\n        continue: function() { return 0; },\n        finalize: function(parser, block) {\n            var item = block._firstChild;\n            while (item) {\n                // check for non-final list item ending with blank line:\n                if (endsWithBlankLine(item) && item._next) {\n                    block._listData.tight = false;\n                    break;\n                }\n                // recurse into children of list item, to see if there are\n                // spaces between any of them:\n                var subitem = item._firstChild;\n                while (subitem) {\n                    if (endsWithBlankLine(subitem) &&\n                        (item._next || subitem._next)) {\n                        block._listData.tight = false;\n                        break;\n                    }\n                    subitem = subitem._next;\n                }\n                item = item._next;\n            }\n        },\n        canContain: function(t) { return (t === 'Item'); },\n        acceptsLines: false\n    },\n    BlockQuote: {\n        continue: function(parser) {\n            var ln = parser.currentLine;\n            if (!parser.indented &&\n                peek(ln, parser.nextNonspace) === C_GREATERTHAN) {\n                parser.advanceNextNonspace();\n                parser.advanceOffset(1, false);\n                if (peek(ln, parser.offset) === C_SPACE) {\n                    parser.offset++;\n                }\n            } else {\n                return 1;\n            }\n            return 0;\n        },\n        finalize: function() { return; },\n        canContain: function(t) { return (t !== 'Item'); },\n        acceptsLines: false\n    },\n    Item: {\n        continue: function(parser, container) {\n            if (parser.blank && container._firstChild !== null) {\n                parser.advanceNextNonspace();\n            } else if (parser.indent >=\n                       container._listData.markerOffset +\n                       container._listData.padding) {\n                parser.advanceOffset(container._listData.markerOffset +\n                    container._listData.padding, true);\n            } else {\n                return 1;\n            }\n            return 0;\n        },\n        finalize: function() { return; },\n        canContain: function(t) { return (t !== 'Item'); },\n        acceptsLines: false\n    },\n    Heading: {\n        continue: function() {\n            // a heading can never container > 1 line, so fail to match:\n            return 1;\n        },\n        finalize: function() { return; },\n        canContain: function() { return false; },\n        acceptsLines: false\n    },\n    ThematicBreak: {\n        continue: function() {\n            // a thematic break can never container > 1 line, so fail to match:\n            return 1;\n        },\n        finalize: function() { return; },\n        canContain: function() { return false; },\n        acceptsLines: false\n    },\n    CodeBlock: {\n        continue: function(parser, container) {\n            var ln = parser.currentLine;\n            var indent = parser.indent;\n            if (container._isFenced) { // fenced\n                var match = (indent <= 3 &&\n                    ln.charAt(parser.nextNonspace) === container._fenceChar &&\n                    ln.slice(parser.nextNonspace).match(reClosingCodeFence));\n                if (match && match[0].length >= container._fenceLength) {\n                    // closing fence - we're at end of line, so we can return\n                    parser.finalize(container, parser.lineNumber);\n                    return 2;\n                } else {\n                    // skip optional spaces of fence offset\n                    var i = container._fenceOffset;\n                    while (i > 0 && peek(ln, parser.offset) === C_SPACE) {\n                        parser.advanceOffset(1, false);\n                        i--;\n                    }\n                }\n            } else { // indented\n                if (indent >= CODE_INDENT) {\n                    parser.advanceOffset(CODE_INDENT, true);\n                } else if (parser.blank) {\n                    parser.advanceNextNonspace();\n                } else {\n                    return 1;\n                }\n            }\n            return 0;\n        },\n        finalize: function(parser, block) {\n            if (block._isFenced) { // fenced\n                // first line becomes info string\n                var content = block._string_content;\n                var newlinePos = content.indexOf('\\n');\n                var firstLine = content.slice(0, newlinePos);\n                var rest = content.slice(newlinePos + 1);\n                block.info = unescapeString(firstLine.trim());\n                block._literal = rest;\n            } else { // indented\n                block._literal = block._string_content.replace(/(\\n *)+$/, '\\n');\n            }\n            block._string_content = null; // allow GC\n        },\n        canContain: function() { return false; },\n        acceptsLines: true\n    },\n    HtmlBlock: {\n        continue: function(parser, container) {\n            return ((parser.blank &&\n                     (container._htmlBlockType === 6 ||\n                      container._htmlBlockType === 7)) ? 1 : 0);\n        },\n        finalize: function(parser, block) {\n            block._literal = block._string_content.replace(/(\\n *)+$/, '');\n            block._string_content = null; // allow GC\n        },\n        canContain: function() { return false; },\n        acceptsLines: true\n    },\n    Paragraph: {\n        continue: function(parser) {\n            return (parser.blank ? 1 : 0);\n        },\n        finalize: function(parser, block) {\n            var pos;\n            var hasReferenceDefs = false;\n\n            // try parsing the beginning as link reference definitions:\n            while (peek(block._string_content, 0) === C_OPEN_BRACKET &&\n                   (pos =\n                    parser.inlineParser.parseReference(block._string_content,\n                                                       parser.refmap))) {\n                block._string_content = block._string_content.slice(pos);\n                hasReferenceDefs = true;\n            }\n            if (hasReferenceDefs && isBlank(block._string_content)) {\n                block.unlink();\n            }\n        },\n        canContain: function() { return false; },\n        acceptsLines: true\n    }\n};\n\n// block start functions.  Return values:\n// 0 = no match\n// 1 = matched container, keep going\n// 2 = matched leaf, no more block starts\nvar blockStarts = [\n    // block quote\n    function(parser) {\n        if (!parser.indented &&\n            peek(parser.currentLine, parser.nextNonspace) === C_GREATERTHAN) {\n            parser.advanceNextNonspace();\n            parser.advanceOffset(1, false);\n            // optional following space\n            if (peek(parser.currentLine, parser.offset) === C_SPACE) {\n                parser.advanceOffset(1, false);\n            }\n            parser.closeUnmatchedBlocks();\n            parser.addChild('BlockQuote', parser.nextNonspace);\n            return 1;\n        } else {\n            return 0;\n        }\n    },\n\n    // ATX heading\n    function(parser) {\n        var match;\n        if (!parser.indented &&\n            (match = parser.currentLine.slice(parser.nextNonspace).match(reATXHeadingMarker))) {\n            parser.advanceNextNonspace();\n            parser.advanceOffset(match[0].length, false);\n            parser.closeUnmatchedBlocks();\n            var container = parser.addChild('Heading', parser.nextNonspace);\n            container.level = match[0].trim().length; // number of #s\n            // remove trailing ###s:\n            container._string_content =\n                parser.currentLine.slice(parser.offset).replace(/^ *#+ *$/, '').replace(/ +#+ *$/, '');\n            parser.advanceOffset(parser.currentLine.length - parser.offset);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // Fenced code block\n    function(parser) {\n        var match;\n        if (!parser.indented &&\n            (match = parser.currentLine.slice(parser.nextNonspace).match(reCodeFence))) {\n            var fenceLength = match[0].length;\n            parser.closeUnmatchedBlocks();\n            var container = parser.addChild('CodeBlock', parser.nextNonspace);\n            container._isFenced = true;\n            container._fenceLength = fenceLength;\n            container._fenceChar = match[0][0];\n            container._fenceOffset = parser.indent;\n            parser.advanceNextNonspace();\n            parser.advanceOffset(fenceLength, false);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // HTML block\n    function(parser, container) {\n        if (!parser.indented &&\n            peek(parser.currentLine, parser.nextNonspace) === C_LESSTHAN) {\n            var s = parser.currentLine.slice(parser.nextNonspace);\n            var blockType;\n\n            for (blockType = 1; blockType <= 7; blockType++) {\n                if (reHtmlBlockOpen[blockType].test(s) &&\n                    (blockType < 7 ||\n                     container.type !== 'Paragraph')) {\n                    parser.closeUnmatchedBlocks();\n                    // We don't adjust parser.offset;\n                    // spaces are part of the HTML block:\n                    var b = parser.addChild('HtmlBlock',\n                                            parser.offset);\n                    b._htmlBlockType = blockType;\n                    return 2;\n                }\n            }\n        }\n\n        return 0;\n\n    },\n\n    // Setext heading\n    function(parser, container) {\n        var match;\n        if (!parser.indented &&\n            container.type === 'Paragraph' &&\n                   ((match = parser.currentLine.slice(parser.nextNonspace).match(reSetextHeadingLine)))) {\n            parser.closeUnmatchedBlocks();\n            var heading = new Node('Heading', container.sourcepos);\n            heading.level = match[0][0] === '=' ? 1 : 2;\n            heading._string_content = container._string_content;\n            container.insertAfter(heading);\n            container.unlink();\n            parser.tip = heading;\n            parser.advanceOffset(parser.currentLine.length - parser.offset, false);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // thematic break\n    function(parser) {\n        if (!parser.indented &&\n            reThematicBreak.test(parser.currentLine.slice(parser.nextNonspace))) {\n            parser.closeUnmatchedBlocks();\n            parser.addChild('ThematicBreak', parser.nextNonspace);\n            parser.advanceOffset(parser.currentLine.length - parser.offset, false);\n            return 2;\n        } else {\n            return 0;\n        }\n    },\n\n    // list item\n    function(parser, container) {\n        var data;\n\n        if ((!parser.indented || container.type === 'List')\n                && (data = parseListMarker(parser))) {\n            parser.closeUnmatchedBlocks();\n\n            // add the list if needed\n            if (parser.tip.type !== 'List' ||\n                !(listsMatch(container._listData, data))) {\n                container = parser.addChild('List', parser.nextNonspace);\n                container._listData = data;\n            }\n\n            // add the list item\n            container = parser.addChild('Item', parser.nextNonspace);\n            container._listData = data;\n            return 1;\n        } else {\n            return 0;\n        }\n    },\n\n    // indented code block\n    function(parser) {\n        if (parser.indented &&\n            parser.tip.type !== 'Paragraph' &&\n            !parser.blank) {\n            // indented code\n            parser.advanceOffset(CODE_INDENT, true);\n            parser.closeUnmatchedBlocks();\n            parser.addChild('CodeBlock', parser.offset);\n            return 2;\n        } else {\n            return 0;\n        }\n     }\n\n];\n\nvar advanceOffset = function(count, columns) {\n    var cols = 0;\n    var currentLine = this.currentLine;\n    var charsToTab;\n    var c;\n    while (count > 0 && (c = currentLine[this.offset])) {\n        if (c === '\\t') {\n            charsToTab = 4 - (this.column % 4);\n            this.column += charsToTab;\n            this.offset += 1;\n            count -= (columns ? charsToTab : 1);\n        } else {\n            cols += 1;\n            this.offset += 1;\n            this.column += 1; // assume ascii; block starts are ascii\n            count -= 1;\n        }\n    }\n};\n\nvar advanceNextNonspace = function() {\n    this.offset = this.nextNonspace;\n    this.column = this.nextNonspaceColumn;\n};\n\nvar findNextNonspace = function() {\n    var currentLine = this.currentLine;\n    var i = this.offset;\n    var cols = this.column;\n    var c;\n\n    while ((c = currentLine.charAt(i)) !== '') {\n        if (c === ' ') {\n            i++;\n            cols++;\n        } else if (c === '\\t') {\n            i++;\n            cols += (4 - (cols % 4));\n        } else {\n            break;\n        }\n    }\n    this.blank = (c === '\\n' || c === '\\r' || c === '');\n    this.nextNonspace = i;\n    this.nextNonspaceColumn = cols;\n    this.indent = this.nextNonspaceColumn - this.column;\n    this.indented = this.indent >= CODE_INDENT;\n};\n\n// Analyze a line of text and update the document appropriately.\n// We parse markdown text by calling this on each line of input,\n// then finalizing the document.\nvar incorporateLine = function(ln) {\n    var all_matched = true;\n    var t;\n\n    var container = this.doc;\n    this.oldtip = this.tip;\n    this.offset = 0;\n    this.column = 0;\n    this.lineNumber += 1;\n\n    // replace NUL characters for security\n    if (ln.indexOf('\\u0000') !== -1) {\n        ln = ln.replace(/\\0/g, '\\uFFFD');\n    }\n\n    this.currentLine = ln;\n\n    // For each containing block, try to parse the associated line start.\n    // Bail out on failure: container will point to the last matching block.\n    // Set all_matched to false if not all containers match.\n    var lastChild;\n    while ((lastChild = container._lastChild) && lastChild._open) {\n        container = lastChild;\n\n        this.findNextNonspace();\n\n        switch (this.blocks[container.type].continue(this, container)) {\n        case 0: // we've matched, keep going\n            break;\n        case 1: // we've failed to match a block\n            all_matched = false;\n            break;\n        case 2: // we've hit end of line for fenced code close and can return\n            this.lastLineLength = ln.length;\n            return;\n        default:\n            throw 'continue returned illegal value, must be 0, 1, or 2';\n        }\n        if (!all_matched) {\n            container = container._parent; // back up to last matching block\n            break;\n        }\n    }\n\n    this.allClosed = (container === this.oldtip);\n    this.lastMatchedContainer = container;\n\n    // Check to see if we've hit 2nd blank line; if so break out of list:\n    if (this.blank && container._lastLineBlank) {\n        this.breakOutOfLists(container);\n        container = this.tip;\n    }\n\n    var matchedLeaf = container.type !== 'Paragraph' &&\n            blocks[container.type].acceptsLines;\n    var starts = this.blockStarts;\n    var startsLen = starts.length;\n    // Unless last matched container is a code block, try new container starts,\n    // adding children to the last matched container:\n    while (!matchedLeaf) {\n\n        this.findNextNonspace();\n\n        // this is a little performance optimization:\n        if (!this.indented &&\n            !reMaybeSpecial.test(ln.slice(this.nextNonspace))) {\n            this.advanceNextNonspace();\n            break;\n        }\n\n        var i = 0;\n        while (i < startsLen) {\n            var res = starts[i](this, container);\n            if (res === 1) {\n                container = this.tip;\n                break;\n            } else if (res === 2) {\n                container = this.tip;\n                matchedLeaf = true;\n                break;\n            } else {\n                i++;\n            }\n        }\n\n        if (i === startsLen) { // nothing matched\n            this.advanceNextNonspace();\n            break;\n        }\n    }\n\n    // What remains at the offset is a text line.  Add the text to the\n    // appropriate container.\n\n   // First check for a lazy paragraph continuation:\n    if (!this.allClosed && !this.blank &&\n        this.tip.type === 'Paragraph') {\n        // lazy paragraph continuation\n        this.addLine();\n\n    } else { // not a lazy continuation\n\n        // finalize any blocks not matched\n        this.closeUnmatchedBlocks();\n        if (this.blank && container.lastChild) {\n            container.lastChild._lastLineBlank = true;\n        }\n\n        t = container.type;\n\n        // Block quote lines are never blank as they start with >\n        // and we don't count blanks in fenced code for purposes of tight/loose\n        // lists or breaking out of lists.  We also don't set _lastLineBlank\n        // on an empty list item, or if we just closed a fenced block.\n        var lastLineBlank = this.blank &&\n            !(t === 'BlockQuote' ||\n              (t === 'CodeBlock' && container._isFenced) ||\n              (t === 'Item' &&\n               !container._firstChild &&\n               container.sourcepos[0][0] === this.lineNumber));\n\n        // propagate lastLineBlank up through parents:\n        var cont = container;\n        while (cont) {\n            cont._lastLineBlank = lastLineBlank;\n            cont = cont._parent;\n        }\n\n        if (this.blocks[t].acceptsLines) {\n            this.addLine();\n            // if HtmlBlock, check for end condition\n            if (t === 'HtmlBlock' &&\n                container._htmlBlockType >= 1 &&\n                container._htmlBlockType <= 5 &&\n                reHtmlBlockClose[container._htmlBlockType].test(this.currentLine.slice(this.offset))) {\n                this.finalize(container, this.lineNumber);\n            }\n\n        } else if (this.offset < ln.length && !this.blank) {\n            // create paragraph container for line\n            container = this.addChild('Paragraph', this.offset);\n            this.advanceNextNonspace();\n            this.addLine();\n        }\n    }\n    this.lastLineLength = ln.length;\n};\n\n// Finalize a block.  Close it and do any necessary postprocessing,\n// e.g. creating string_content from strings, setting the 'tight'\n// or 'loose' status of a list, and parsing the beginnings\n// of paragraphs for reference definitions.  Reset the tip to the\n// parent of the closed block.\nvar finalize = function(block, lineNumber) {\n    var above = block._parent;\n    block._open = false;\n    block.sourcepos[1] = [lineNumber, this.lastLineLength];\n\n    this.blocks[block.type].finalize(this, block);\n\n    this.tip = above;\n};\n\n// Walk through a block & children recursively, parsing string content\n// into inline content where appropriate.\nvar processInlines = function(block) {\n    var node, event, t;\n    var walker = block.walker();\n    this.inlineParser.refmap = this.refmap;\n    this.inlineParser.options = this.options;\n    while ((event = walker.next())) {\n        node = event.node;\n        t = node.type;\n        if (!event.entering && (t === 'Paragraph' || t === 'Heading')) {\n            this.inlineParser.parse(node);\n        }\n    }\n};\n\nvar Document = function() {\n    var doc = new Node('Document', [[1, 1], [0, 0]]);\n    return doc;\n};\n\n// The main parsing function.  Returns a parsed document AST.\nvar parse = function(input) {\n    this.doc = new Document();\n    this.tip = this.doc;\n    this.refmap = {};\n    this.lineNumber = 0;\n    this.lastLineLength = 0;\n    this.offset = 0;\n    this.column = 0;\n    this.lastMatchedContainer = this.doc;\n    this.currentLine = \"\";\n    if (this.options.time) { console.time(\"preparing input\"); }\n    var lines = input.split(reLineEnding);\n    var len = lines.length;\n    if (input.charCodeAt(input.length - 1) === C_NEWLINE) {\n        // ignore last blank line created by final newline\n        len -= 1;\n    }\n    if (this.options.time) { console.timeEnd(\"preparing input\"); }\n    if (this.options.time) { console.time(\"block parsing\"); }\n    for (var i = 0; i < len; i++) {\n        this.incorporateLine(lines[i]);\n    }\n    while (this.tip) {\n        this.finalize(this.tip, len);\n    }\n    if (this.options.time) { console.timeEnd(\"block parsing\"); }\n    if (this.options.time) { console.time(\"inline parsing\"); }\n    this.processInlines(this.doc);\n    if (this.options.time) { console.timeEnd(\"inline parsing\"); }\n    return this.doc;\n};\n\n\n// The Parser object.\nfunction Parser(options){\n    return {\n        doc: new Document(),\n        blocks: blocks,\n        blockStarts: blockStarts,\n        tip: this.doc,\n        oldtip: this.doc,\n        currentLine: \"\",\n        lineNumber: 0,\n        offset: 0,\n        column: 0,\n        nextNonspace: 0,\n        nextNonspaceColumn: 0,\n        indent: 0,\n        indented: false,\n        blank: false,\n        allClosed: true,\n        lastMatchedContainer: this.doc,\n        refmap: {},\n        lastLineLength: 0,\n        inlineParser: new InlineParser(options),\n        findNextNonspace: findNextNonspace,\n        advanceOffset: advanceOffset,\n        advanceNextNonspace: advanceNextNonspace,\n        breakOutOfLists: breakOutOfLists,\n        addLine: addLine,\n        addChild: addChild,\n        incorporateLine: incorporateLine,\n        finalize: finalize,\n        processInlines: processInlines,\n        closeUnmatchedBlocks: closeUnmatchedBlocks,\n        parse: parse,\n        options: options || {}\n    };\n}\n\nmodule.exports = Parser;\n"},"lineCount":871}},"error":null,"hash":"c7d9372c19afebc6c813adc85efd985a","cacheData":{"env":{}}}